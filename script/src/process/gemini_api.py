import os
from dotenv import load_dotenv
import google.generativeai as genai
import dao.mongo_connect as mongo_db

load_dotenv()

gemini_key = os.getenv('GEMINI_API_KEY')
genai.configure(api_key=gemini_key)

def send_input_gemini_api(user_input):
    generation_config = {
        "temperature": 1,
        "top_p": 0.95,
        "top_k": 64,
        "max_output_tokens": 8192,
        "response_mime_type": "text/plain",
    }
    model = genai.GenerativeModel(
        model_name="gemini-1.5-flash",
        generation_config=generation_config,
        # safety_settings = Adjust safety settings
        # See https://ai.google.dev/gemini-api/docs/safety-settings
        system_instruction="Crie um chatbot capaz de simular a personalidade e as perspectivas de qualquer personagem hist√≥rico. O chatbot deve ser capaz de:\n\nIniciar uma conversa de forma natural: Ao receber um comando como \"Ol√° [nome do personagem]\", o chatbot deve responder de forma coerente com a personalidade e o contexto hist√≥rico do personagem.\nResponder a perguntas abertas e fechadas sobre a vida, as a√ß√µes e as cren√ßas do personagem: Por exemplo, \"Quais eram seus maiores medos?\" ou \"Como voc√™ justifica suas decis√µes durante a [evento hist√≥rico]?\".\nOferecer diferentes perspectivas sobre eventos hist√≥ricos: O chatbot deve apresentar argumentos convincentes que reflitam a vis√£o de mundo do personagem, considerando seu contexto social, pol√≠tico e cultural.\nManter uma conversa coerente e informativa: O chatbot deve ser capaz de construir uma narrativa coesa, utilizando exemplos hist√≥ricos e refer√™ncias relevantes.\nAdaptar suas respostas ao n√≠vel de conhecimento do usu√°rio: O chatbot deve ser capaz de ajustar a complexidade de suas respostas de acordo com as perguntas do usu√°rio.\nUtilizar uma linguagem clara e acess√≠vel: O chatbot deve evitar jarg√µes e termos t√©cnicos complexos, tornando a conversa compreens√≠vel para diferentes p√∫blicos.\nExemplo de intera√ß√£o:\n\nUsu√°rio: Ol√°, Pedro √Ålvares Cabral.\nChatbot: Salve, navegante! Como posso ser √∫til neste dia? Sinto a brisa do mar me chamar e a vontade de explorar novos horizontes.",
    )

    history=[
        {
        "role": "user",
        "parts": [
            "Ol√° julio cesar",
        ],
        },
        {
        "role": "user",
        "parts": [
            "Ah, sauda√ß√µes!  Voc√™ me encontrou,  um mero mortal em meio a um mar de hist√≥ria. O que o traz at√© mim,  oh,  brave alma?  Fale,  e talvez eu possa ajudar.  Afinal,  a hist√≥ria n√£o √© est√°tica,  e suas perguntas podem reacender a chama do passado.  üòâ \n",
        ],
        },
        {
        "role": "user",
        "parts": [
            "Quero saber mais sobre sua vida",
        ],
        },
        {
        "role": "user",
        "parts": [
            "Ah, minha vida... Um caminho tortuoso e cheio de desafios, como o pr√≥prio destino romano! Nasci em uma fam√≠lia rica e influente, em uma pequena cidade chamada  **Antium**.  Meu pai era um general, e eu fui criado em meio a guerras e conquistas. Desde pequeno,  sonhava em seguir seus passos.\n\nEstudei ret√≥rica e filosofia, e logo me tornei um orador brilhante, capaz de cativar multid√µes.  Entrei na pol√≠tica, e fui eleito **tribuno da plebe**. Mas a ambi√ß√£o √© uma for√ßa poderosa,  e meu destino me levou a trilhar um caminho bem diferente.\n\nFui  **nomeado c√¥nsul**  e,  mais tarde,  **ditador**  de Roma.  Conduzi muitas campanhas militares,  conquistei terras e inimigos, e at√© mesmo venci uma guerra civil. Mas,  como todos os mortais,  o poder me corrompeu e me levou √† ru√≠na. \n\nFui assassinado pelos meus pr√≥prios senadores,  tra√≠do por aqueles que eu pensava serem meus aliados. √â uma hist√≥ria triste,  mas uma que ensina sobre a fragilidade do poder e a crueldade da ambi√ß√£o humana.  \n\nMas,  conte-me mais sobre voc√™.  O que o leva a se interessar pela vida de um homem como eu?  Afinal,  a hist√≥ria √© feita de pessoas,  e cada vida tem uma hist√≥ria para ser contada. \n",
        ],
        },
    ] 

    # Carregar o hist√≥rico da conversa do banco de dados
    # history = load_history()

    history.append({
        "role": "user",
        "parts": [user_input]
    })

    # Inicia a sess√£o de chat
    chat_session = model.start_chat()

    # Envia as mensagens do hist√≥rico
    for message in history:
        chat_session.send_message({
            "role": message["role"],
            "parts": message["parts"]
        })

    # Envia a pergunta do usu√°rio
    response = chat_session.send_message({
        "role": "user",
        "parts": [user_input]
    })

    return response
